// Code generated by bridgegen. DO NOT EDIT.
// This file is ALWAYS REGENERATED - do not modify.
// For customizations, see model.go and bridge.go which use type aliases and embedding.

package schemamigrationsrepobridge

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/jrazmi/envoker/bridge/scaffolding/errs"
	"github.com/jrazmi/envoker/bridge/scaffolding/fopbridge"
	"github.com/jrazmi/envoker/core/repositories/schemamigrationsrepo"
	"github.com/jrazmi/envoker/core/scaffolding/fop"
	"github.com/jrazmi/envoker/infrastructure/web"
)

// ========================================
// QUERY PARAMS & PATH PARAMS
// ========================================

// generatedQueryParams holds raw query string values from the HTTP request
type generatedQueryParams struct {
	Limit  string
	Cursor string
	Order  string
	// Filter fields
	SearchTerm string
	Checksum   string
	AppliedAt  string
}

// generatedPathParams holds path parameter values (parsed to their actual types)
type generatedPathParams struct {
	Version string
}

// parseGeneratedQueryParams extracts raw query string values
func parseGeneratedQueryParams(r *http.Request) generatedQueryParams {
	q := r.URL.Query()
	return generatedQueryParams{
		Limit:      q.Get("limit"),
		Cursor:     q.Get("cursor"),
		Order:      q.Get("order"),
		SearchTerm: q.Get("search_term"),
		Checksum:   q.Get("checksum"),
		AppliedAt:  q.Get("applied_at"),
	}
}

// parseGeneratedFilter converts query params to repository filter with validation
func parseGeneratedFilter(qp generatedQueryParams) (schemamigrationsrepo.SchemaMigrationFilter, error) {
	filter := schemamigrationsrepo.SchemaMigrationFilter{}

	// SearchTerm filter
	if qp.SearchTerm != "" {
		filter.SearchTerm = &qp.SearchTerm
	}
	// Checksum - string filter
	if qp.Checksum != "" {
		filter.Checksum = &qp.Checksum
	}
	// AppliedAt - timestamp filter
	if qp.AppliedAt != "" {
		if t, err := time.Parse(time.RFC3339, qp.AppliedAt); err == nil {
			filter.AppliedAt = &t
		} else {
			return filter, fmt.Errorf("invalid applied_at format: %s", qp.AppliedAt)
		}
	}

	return filter, nil
}

// parseGeneratedPath extracts and parses path parameters to their actual types
func parseGeneratedPath(r *http.Request) (generatedPathParams, error) {
	var pp generatedPathParams

	// Parse primary key
	pkStr := r.PathValue("version")
	if pkStr == "" {
		return pp, fmt.Errorf("version is required")
	}
	pp.Version = pkStr

	return pp, nil
}

// orderByFields maps URL-friendly field names to repository OrderBy constants
var orderByFields = map[string]string{
	"version":    schemamigrationsrepo.OrderByPK,
	"created_at": schemamigrationsrepo.OrderByCreatedAt,
	"updated_at": schemamigrationsrepo.OrderByUpdatedAt,
	"checksum":   schemamigrationsrepo.OrderByChecksum,
	"applied_at": schemamigrationsrepo.OrderByAppliedAt,
}

// parseGeneratedOrderBy converts order query param to fop.By with validation
func parseGeneratedOrderBy(order string) fop.By {
	if order == "" {
		return schemamigrationsrepo.DefaultOrderBy
	}

	// Use FOP's ParseOrder which handles "field,direction" format
	orderBy, err := fop.ParseOrder(orderByFields, order, schemamigrationsrepo.DefaultOrderBy)
	if err != nil {
		return schemamigrationsrepo.DefaultOrderBy
	}

	return orderBy
}

// ========================================
// GENERATED BRIDGE (HTTP HANDLERS)
// ========================================

// GeneratedBridge provides default HTTP handler implementations.
// Embed this in your custom bridge struct to inherit default handlers.
// The bridge is tightly coupled to the repository - it directly uses the concrete repository type.
type GeneratedBridge struct {
	schemaMigrationRepository *schemamigrationsrepo.Repository
}

// ============================================================================
// SUGGESTED ROUTES FOR http.go
// ============================================================================
// Copy these routes to http.go's AddHttpRoutes function.
// If new foreign keys are added by migrations, new routes will appear here.
//
//	// Standard CRUD routes
//	group.GET("/schema-migrations", b.httpList)
//	group.GET("/schema-migrations/{version}", b.httpGetByID)
//	group.POST("/schema-migrations", b.httpCreate)
//	group.PUT("/schema-migrations/{version}", b.httpUpdate)
//	group.DELETE("/schema-migrations/{version}", b.httpDelete)
// ============================================================================

// httpList handles GET requests for listing SchemaMigrations with pagination and filtering
func (b *GeneratedBridge) httpList(ctx context.Context, r *http.Request) web.Encoder {
	qp := parseGeneratedQueryParams(r)

	page, err := fop.ParsePageStringCursor(qp.Limit, qp.Cursor)
	if err != nil {
		return errs.NewFieldErrors("page", err)
	}

	filter, err := parseGeneratedFilter(qp)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid filter: %s", err)
	}

	orderBy := parseGeneratedOrderBy(qp.Order)

	records, pagination, err := b.schemaMigrationRepository.List(ctx, filter, orderBy, page)
	if err != nil {
		return errs.Newf(errs.Internal, "list SchemaMigrations: %s", err)
	}

	return fopbridge.NewPaginatedResult(records, pagination)
}

// httpGetByID handles GET requests for retrieving a specific schemaMigration by ID
func (b *GeneratedBridge) httpGetByID(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	record, err := b.schemaMigrationRepository.Get(ctx, qpath.Version)
	if err != nil {
		return errs.Newf(errs.NotFound, "schemaMigration not found: %v", qpath.Version)
	}

	return fopbridge.NewRecordResponse(record)
}

// httpCreate handles POST requests for creating a new schemaMigration
func (b *GeneratedBridge) httpCreate(ctx context.Context, r *http.Request) web.Encoder {
	var input schemamigrationsrepo.CreateSchemaMigration
	if err := web.Decode(r, &input); err != nil {
		return errs.Newf(errs.InvalidArgument, "decode: %s", err)
	}

	record, err := b.schemaMigrationRepository.Create(ctx, input)
	if err != nil {
		return errs.Newf(errs.Internal, "create schemaMigration: %s", err)
	}

	return fopbridge.NewRecordResponse(record)
}

// httpUpdate handles PUT/PATCH requests for updating an existing schemaMigration
func (b *GeneratedBridge) httpUpdate(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	var input schemamigrationsrepo.UpdateSchemaMigration
	if err := web.Decode(r, &input); err != nil {
		return errs.Newf(errs.InvalidArgument, "decode: %s", err)
	}

	err = b.schemaMigrationRepository.Update(ctx, qpath.Version, input)
	if err != nil {
		return errs.Newf(errs.Internal, "update schemaMigration: %s", err)
	}

	return fopbridge.NewCodeResponse(errs.OK.String(), "SchemaMigration updated successfully")
}

// httpDelete handles DELETE requests for removing a schemaMigration
func (b *GeneratedBridge) httpDelete(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	err = b.schemaMigrationRepository.Delete(ctx, qpath.Version)
	if err != nil {
		return errs.Newf(errs.Internal, "delete schemaMigration: %s", err)
	}

	return fopbridge.NewCodeResponse(errs.OK.String(), "SchemaMigration deleted successfully")
}
