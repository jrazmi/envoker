// Code generated by bridgegen. DO NOT EDIT.
// This file is ALWAYS REGENERATED - do not modify.
// For customizations, see model.go and bridge.go which use type aliases and embedding.

package tasksrepobridge

import (
	"context"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/jrazmi/envoker/bridge/scaffolding/errs"
	"github.com/jrazmi/envoker/bridge/scaffolding/fopbridge"
	"github.com/jrazmi/envoker/core/repositories/tasksrepo"
	"github.com/jrazmi/envoker/core/scaffolding/fop"
	"github.com/jrazmi/envoker/infrastructure/web"
)

// ========================================
// QUERY PARAMS & PATH PARAMS
// ========================================

// generatedQueryParams holds raw query string values from the HTTP request
type generatedQueryParams struct {
	Limit  string
	Cursor string
	Order  string
	// Filter fields
	SearchTerm       string
	ProcessingStatus string
	TaskType         string
	Priority         string
	MaxRetries       string
	RetryCount       string
	ErrorMessage     string
	ProcessingTimeMs string
	LastRunAt        string
}

// generatedPathParams holds path parameter values (parsed to their actual types)
type generatedPathParams struct {
	TaskId string
}

// parseGeneratedQueryParams extracts raw query string values
func parseGeneratedQueryParams(r *http.Request) generatedQueryParams {
	q := r.URL.Query()
	return generatedQueryParams{
		Limit:            q.Get("limit"),
		Cursor:           q.Get("cursor"),
		Order:            q.Get("order"),
		SearchTerm:       q.Get("search_term"),
		ProcessingStatus: q.Get("processing_status"),
		TaskType:         q.Get("task_type"),
		Priority:         q.Get("priority"),
		MaxRetries:       q.Get("max_retries"),
		RetryCount:       q.Get("retry_count"),
		ErrorMessage:     q.Get("error_message"),
		ProcessingTimeMs: q.Get("processing_time_ms"),
		LastRunAt:        q.Get("last_run_at"),
	}
}

// parseGeneratedFilter converts query params to repository filter with validation
func parseGeneratedFilter(qp generatedQueryParams) (tasksrepo.TaskFilter, error) {
	filter := tasksrepo.TaskFilter{}

	// SearchTerm filter
	if qp.SearchTerm != "" {
		filter.SearchTerm = &qp.SearchTerm
	}
	// ProcessingStatus - string filter
	if qp.ProcessingStatus != "" {
		filter.ProcessingStatus = &qp.ProcessingStatus
	}
	// TaskType - string filter
	if qp.TaskType != "" {
		filter.TaskType = &qp.TaskType
	}
	// Priority - int filter
	if qp.Priority != "" {
		if val, err := strconv.Atoi(qp.Priority); err == nil {
			filter.Priority = &val
		} else {
			return filter, fmt.Errorf("invalid priority: %s", qp.Priority)
		}
	}
	// MaxRetries - int filter
	if qp.MaxRetries != "" {
		if val, err := strconv.Atoi(qp.MaxRetries); err == nil {
			filter.MaxRetries = &val
		} else {
			return filter, fmt.Errorf("invalid max_retries: %s", qp.MaxRetries)
		}
	}
	// RetryCount - int filter
	if qp.RetryCount != "" {
		if val, err := strconv.Atoi(qp.RetryCount); err == nil {
			filter.RetryCount = &val
		} else {
			return filter, fmt.Errorf("invalid retry_count: %s", qp.RetryCount)
		}
	}
	// ErrorMessage - string filter
	if qp.ErrorMessage != "" {
		filter.ErrorMessage = &qp.ErrorMessage
	}
	// ProcessingTimeMs - int filter
	if qp.ProcessingTimeMs != "" {
		if val, err := strconv.Atoi(qp.ProcessingTimeMs); err == nil {
			filter.ProcessingTimeMs = &val
		} else {
			return filter, fmt.Errorf("invalid processing_time_ms: %s", qp.ProcessingTimeMs)
		}
	}
	// LastRunAt - timestamp filter
	if qp.LastRunAt != "" {
		if t, err := time.Parse(time.RFC3339, qp.LastRunAt); err == nil {
			filter.LastRunAt = &t
		} else {
			return filter, fmt.Errorf("invalid last_run_at format: %s", qp.LastRunAt)
		}
	}

	return filter, nil
}

// parseGeneratedPath extracts and parses path parameters to their actual types
func parseGeneratedPath(r *http.Request) (generatedPathParams, error) {
	var pp generatedPathParams

	// Parse primary key
	pkStr := r.PathValue("task_id")
	if pkStr == "" {
		return pp, fmt.Errorf("task_id is required")
	}
	pp.TaskId = pkStr

	return pp, nil
}

// orderByFields maps URL-friendly field names to repository OrderBy constants
var orderByFields = map[string]string{
	"task_id":            tasksrepo.OrderByPK,
	"created_at":         tasksrepo.OrderByCreatedAt,
	"updated_at":         tasksrepo.OrderByUpdatedAt,
	"processing_status":  tasksrepo.OrderByProcessingStatus,
	"task_type":          tasksrepo.OrderByTaskType,
	"priority":           tasksrepo.OrderByPriority,
	"max_retries":        tasksrepo.OrderByMaxRetries,
	"retry_count":        tasksrepo.OrderByRetryCount,
	"error_message":      tasksrepo.OrderByErrorMessage,
	"processing_time_ms": tasksrepo.OrderByProcessingTimeMs,
	"last_run_at":        tasksrepo.OrderByLastRunAt,
}

// parseGeneratedOrderBy converts order query param to fop.By with validation
func parseGeneratedOrderBy(order string) fop.By {
	if order == "" {
		return tasksrepo.DefaultOrderBy
	}

	// Use FOP's ParseOrder which handles "field,direction" format
	orderBy, err := fop.ParseOrder(orderByFields, order, tasksrepo.DefaultOrderBy)
	if err != nil {
		return tasksrepo.DefaultOrderBy
	}

	return orderBy
}

// ========================================
// GENERATED BRIDGE (HTTP HANDLERS)
// ========================================

// GeneratedBridge provides default HTTP handler implementations.
// Embed this in your custom bridge struct to inherit default handlers.
// The bridge is tightly coupled to the repository - it directly uses the concrete repository type.
type GeneratedBridge struct {
	taskRepository *tasksrepo.Repository
}

// ============================================================================
// SUGGESTED ROUTES FOR http.go
// ============================================================================
// Copy these routes to http.go's AddHttpRoutes function.
// If new foreign keys are added by migrations, new routes will appear here.
//
//	// Standard CRUD routes
//	group.GET("/tasks", b.httpList)
//	group.GET("/tasks/{task_id}", b.httpGetByID)
//	group.POST("/tasks", b.httpCreate)
//	group.PUT("/tasks/{task_id}", b.httpUpdate)
//	group.DELETE("/tasks/{task_id}", b.httpDelete)
// ============================================================================

// httpList handles GET requests for listing Tasks with pagination and filtering
func (b *GeneratedBridge) httpList(ctx context.Context, r *http.Request) web.Encoder {
	qp := parseGeneratedQueryParams(r)

	page, err := fop.ParsePageStringCursor(qp.Limit, qp.Cursor)
	if err != nil {
		return errs.NewFieldErrors("page", err)
	}

	filter, err := parseGeneratedFilter(qp)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid filter: %s", err)
	}

	orderBy := parseGeneratedOrderBy(qp.Order)

	records, pagination, err := b.taskRepository.List(ctx, filter, orderBy, page)
	if err != nil {
		return errs.Newf(errs.Internal, "list Tasks: %s", err)
	}

	return fopbridge.NewPaginatedResult(records, pagination)
}

// httpGetByID handles GET requests for retrieving a specific task by ID
func (b *GeneratedBridge) httpGetByID(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	record, err := b.taskRepository.Get(ctx, qpath.TaskId)
	if err != nil {
		return errs.Newf(errs.NotFound, "task not found: %v", qpath.TaskId)
	}

	return fopbridge.NewRecordResponse(record)
}

// httpCreate handles POST requests for creating a new task
func (b *GeneratedBridge) httpCreate(ctx context.Context, r *http.Request) web.Encoder {
	var input tasksrepo.CreateTask
	if err := web.Decode(r, &input); err != nil {
		return errs.Newf(errs.InvalidArgument, "decode: %s", err)
	}

	record, err := b.taskRepository.Create(ctx, input)
	if err != nil {
		return errs.Newf(errs.Internal, "create task: %s", err)
	}

	return fopbridge.NewRecordResponse(record)
}

// httpUpdate handles PUT/PATCH requests for updating an existing task
func (b *GeneratedBridge) httpUpdate(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	var input tasksrepo.UpdateTask
	if err := web.Decode(r, &input); err != nil {
		return errs.Newf(errs.InvalidArgument, "decode: %s", err)
	}

	err = b.taskRepository.Update(ctx, qpath.TaskId, input)
	if err != nil {
		return errs.Newf(errs.Internal, "update task: %s", err)
	}

	return fopbridge.NewCodeResponse(errs.OK.String(), "Task updated successfully")
}

// httpDelete handles DELETE requests for removing a task
func (b *GeneratedBridge) httpDelete(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	err = b.taskRepository.Delete(ctx, qpath.TaskId)
	if err != nil {
		return errs.Newf(errs.Internal, "delete task: %s", err)
	}

	return fopbridge.NewCodeResponse(errs.OK.String(), "Task deleted successfully")
}
