// Code generated by bridgegen. DO NOT EDIT.

package tasksrepobridge

import (
	"encoding/json"
	"time"
)

// Task represents the bridge model for task
type Task struct {
	TaskId string `json:"task_id"`
	ProcessingStatus string `json:"processing_status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	TaskType string `json:"task_type"`
	Metadata *json.RawMessage `json:"metadata,omitempty"`
	Priority *int `json:"priority,omitempty"`
	MaxRetries *int `json:"max_retries,omitempty"`
	RetryCount *int `json:"retry_count,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
	ProcessingTimeMs *int `json:"processing_time_ms,omitempty"`
	LastRunAt *time.Time `json:"last_run_at,omitempty"`
}

// Encode implements the encoder interface
func (t Task) Encode() ([]byte, string, error) {
	data, err := json.Marshal(t)
	return data, "application/json", err
}

// CreateTaskInput represents the input for creating a new task
type CreateTaskInput struct {
	TaskId string `json:"task_id"`
	ProcessingStatus string `json:"processing_status,omitempty"`
	TaskType string `json:"task_type"`
	Metadata *json.RawMessage `json:"metadata,omitempty"`
	Priority *int `json:"priority,omitempty"`
	MaxRetries *int `json:"max_retries,omitempty"`
	RetryCount *int `json:"retry_count,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
	ProcessingTimeMs *int `json:"processing_time_ms,omitempty"`
	LastRunAt *time.Time `json:"last_run_at,omitempty"`
}

// Decode implements the decoder interface
func (c *CreateTaskInput) Decode(data []byte) error {
	return json.Unmarshal(data, c)
}

// UpdateTaskInput represents the input for updating a task
type UpdateTaskInput struct {
	ProcessingStatus *string `json:"processing_status,omitempty"`
	TaskType *string `json:"task_type,omitempty"`
	Metadata *json.RawMessage `json:"metadata,omitempty"`
	Priority *int `json:"priority,omitempty"`
	MaxRetries *int `json:"max_retries,omitempty"`
	RetryCount *int `json:"retry_count,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
	ProcessingTimeMs *int `json:"processing_time_ms,omitempty"`
	LastRunAt *time.Time `json:"last_run_at,omitempty"`
}

// Decode implements the decoder interface
func (u *UpdateTaskInput) Decode(data []byte) error {
	return json.Unmarshal(data, u)
}
