// Code generated by bridgegen. DO NOT EDIT.

package tasksrepobridge

import (
	"github.com/jrazmi/envoker/core/repositories/tasksrepo"
)

// MarshalToBridge converts a repository Task to a bridge Task
func MarshalToBridge(repo tasksrepo.Task) Task {
	return Task{
		TaskId:           repo.TaskId,
		ProcessingStatus: repo.ProcessingStatus,
		CreatedAt:        repo.CreatedAt,
		UpdatedAt:        repo.UpdatedAt,
		TaskType:         repo.TaskType,
		Metadata:         repo.Metadata,
		Priority:         repo.Priority,
		MaxRetries:       repo.MaxRetries,
		RetryCount:       repo.RetryCount,
		ErrorMessage:     repo.ErrorMessage,
		ProcessingTimeMs: repo.ProcessingTimeMs,
		LastRunAt:        repo.LastRunAt,
	}
}

// MarshalListToBridge converts a list of repository Tasks to bridge Tasks
func MarshalListToBridge(repos []tasksrepo.Task) []Task {
	result := make([]Task, len(repos))
	for i, repo := range repos {
		result[i] = MarshalToBridge(repo)
	}
	return result
}

// MarshalCreateToRepository converts a bridge Create input to repository Create input
func MarshalCreateToRepository(input CreateTaskInput) tasksrepo.CreateTask {
	return tasksrepo.CreateTask{
		TaskId:           input.TaskId,
		ProcessingStatus: input.ProcessingStatus,
		TaskType:         input.TaskType,
		Metadata:         input.Metadata,
		Priority:         input.Priority,
		MaxRetries:       input.MaxRetries,
		RetryCount:       input.RetryCount,
		ErrorMessage:     input.ErrorMessage,
		ProcessingTimeMs: input.ProcessingTimeMs,
		LastRunAt:        input.LastRunAt,
	}
}

// MarshalUpdateToRepository converts a bridge Update input to repository Update input
func MarshalUpdateToRepository(input UpdateTaskInput) tasksrepo.UpdateTask {
	return tasksrepo.UpdateTask{
		ProcessingStatus: input.ProcessingStatus,
		TaskType:         input.TaskType,
		Metadata:         input.Metadata,
		Priority:         input.Priority,
		MaxRetries:       input.MaxRetries,
		RetryCount:       input.RetryCount,
		ErrorMessage:     input.ErrorMessage,
		ProcessingTimeMs: input.ProcessingTimeMs,
		LastRunAt:        input.LastRunAt,
	}
}
