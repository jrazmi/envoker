package web

import (
	"encoding/json"
	"net/http"
)

// JSONResponse represents a JSON response
type JSONResponse struct {
	Data   interface{}
	Status int
}

// Encode implements the Encoder interface for JSON responses
func (j *JSONResponse) Encode() ([]byte, string, error) {
	data, err := json.Marshal(j.Data)
	if err != nil {
		return nil, "", err
	}
	return data, "application/json; charset=utf-8", nil
}

// HTTPStatus implements the httpStatus interface
func (j *JSONResponse) HTTPStatus() int {
	if j.Status == 0 {
		return http.StatusOK
	}
	return j.Status
}

// ErrorResponse represents an error response
type ErrorResponse struct {
	Err    error
	Status int
}

// Encode implements the Encoder interface for error responses
func (e *ErrorResponse) Encode() ([]byte, string, error) {
	data := map[string]interface{}{
		"error": e.Err.Error(),
	}
	
	jsonData, err := json.Marshal(data)
	if err != nil {
		return nil, "", err
	}
	
	return jsonData, "application/json; charset=utf-8", nil
}

// HTTPStatus implements the httpStatus interface
func (e *ErrorResponse) HTTPStatus() int {
	if e.Status == 0 {
		return http.StatusInternalServerError
	}
	return e.Status
}

// Error implements the error interface
func (e *ErrorResponse) Error() string {
	return e.Err.Error()
}
