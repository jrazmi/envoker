package bridgegen

const MarshalTemplate = `// Code generated by bridgegen. DO NOT EDIT.

package {{.PackageName}}

import (
	"{{.ModulePath}}/core/repositories/{{.RepoPackage}}"
)

// MarshalToBridge converts a repository {{.EntityName}} to a bridge {{.EntityName}}
func MarshalToBridge(repo {{.RepoPackage}}.{{.EntityName}}) {{.EntityName}} {
	return {{.EntityName}}{
{{- range .EntityFields}}
		{{.BridgeName}}: repo.{{.RepoName}},
{{- end}}
	}
}

// MarshalListToBridge converts a list of repository {{.EntityNamePlural}} to bridge {{.EntityNamePlural}}
func MarshalListToBridge(repos []{{.RepoPackage}}.{{.EntityName}}) []{{.EntityName}} {
	result := make([]{{.EntityName}}, len(repos))
	for i, repo := range repos {
		result[i] = MarshalToBridge(repo)
	}
	return result
}

// MarshalCreateToRepository converts a bridge Create input to repository Create input
func MarshalCreateToRepository(input Create{{.EntityName}}Input) {{.RepoPackage}}.Create{{.EntityName}} {
	return {{.RepoPackage}}.Create{{.EntityName}}{
{{- range .CreateFields}}
		{{.RepoName}}: input.{{.BridgeName}},
{{- end}}
	}
}

// MarshalUpdateToRepository converts a bridge Update input to repository Update input
func MarshalUpdateToRepository(input Update{{.EntityName}}Input) {{.RepoPackage}}.Update{{.EntityName}} {
	return {{.RepoPackage}}.Update{{.EntityName}}{
{{- range .UpdateFields}}
		{{.RepoName}}: input.{{.BridgeName}},
{{- end}}
	}
}

// MarshalFilterToRepository converts a bridge Filter to repository Filter
func MarshalFilterToRepository(filter Filter{{.EntityName}}) {{.RepoPackage}}.Filter{{.EntityName}} {
	return {{.RepoPackage}}.Filter{{.EntityName}}{
{{- range .FilterFields}}
		{{.RepoName}}: filter.{{.BridgeName}},
{{- end}}
	}
}
`
