package bridgegen

const FOPTemplate = `// Code generated by bridgegen. DO NOT EDIT.

package {{.PackageName}}

import (
	"net/http"
	"strconv"

	"{{.ModulePath}}/core/scaffolding/fop"
)

type queryParams struct {
	Limit  int
	Cursor string
	Order  string
{{- range .FilterFields}}
	{{.BridgeName}} {{.GoType}}
{{- end}}
}

type pathParams struct {
	{{.PKGoName}} string
{{- range .ForeignKeys}}
	{{.FKGoName}} string
{{- end}}
}

func parseQueryParams(r *http.Request) queryParams {
	qp := queryParams{}

	if limit := r.URL.Query().Get("limit"); limit != "" {
		qp.Limit, _ = strconv.Atoi(limit)
	}

	qp.Cursor = r.URL.Query().Get("cursor")
	qp.Order = r.URL.Query().Get("order")

{{- range .FilterFields}}
	{{- if eq .GoType "string"}}
	qp.{{.BridgeName}} = r.URL.Query().Get("{{.JSONName}}")
	{{- else if eq .GoType "*string"}}
	if val := r.URL.Query().Get("{{.JSONName}}"); val != "" {
		qp.{{.BridgeName}} = &val
	}
	{{- else if eq .GoType "int"}}
	if val := r.URL.Query().Get("{{.JSONName}}"); val != "" {
		if i, err := strconv.Atoi(val); err == nil {
			qp.{{.BridgeName}} = i
		}
	}
	{{- else if eq .GoType "*int"}}
	if val := r.URL.Query().Get("{{.JSONName}}"); val != "" {
		if i, err := strconv.Atoi(val); err == nil {
			qp.{{.BridgeName}} = &i
		}
	}
	{{- end}}
{{- end}}

	return qp
}

func parsePath(r *http.Request) (pathParams, error) {
	pp := pathParams{}
	pp.{{.PKGoName}} = r.PathValue("{{.PKURLParam}}")
{{- range .ForeignKeys}}
	pp.{{.FKGoName}} = r.PathValue("{{.FKURLParam}}")
{{- end}}
	return pp, nil
}

func parseOrderBy(order string) fop.OrderBy {
	// Default ordering
	if order == "" {
		return fop.OrderBy{
			Field: "{{.PKColumn}}",
			Desc:  false,
		}
	}

	// Parse order field
	// TODO: Validate against allowed fields
	return fop.OrderBy{
		Field: order,
		Desc:  false,
	}
}

func parseFilter(qp queryParams) (Filter{{.EntityName}}, error) {
	filter := Filter{{.EntityName}}{
{{- range .FilterFields}}
		{{.BridgeName}}: qp.{{.BridgeName}},
{{- end}}
	}
	return filter, nil
}
`
