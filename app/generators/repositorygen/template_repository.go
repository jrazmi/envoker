package repositorygen

const RepositoryTemplate = `// Code generated by repositorygen. DO NOT EDIT.
// This file contains the repository interface and implementation for {{.EntityName}}.

package {{.PackageName}}

import (
	"context"
	"fmt"

	"github.com/jrazmi/envoker/sdk/fop"
	"github.com/jrazmi/envoker/sdk/logger"
)

// {{.StorerInterfaceName}} defines the data storage interface for {{.EntityName}}
type {{.StorerInterfaceName}} interface {
	// Create inserts a new {{.EntityNameLower}}
	Create(ctx context.Context, input {{.CreateStructName}}) ({{.EntityName}}, error)

	// Get retrieves a {{.EntityNameLower}} by its ID
	Get(ctx context.Context, {{.PKParamName}} {{.PKGoType}}) ({{.EntityName}}, error)

	// Update modifies an existing {{.EntityNameLower}}
	Update(ctx context.Context, {{.PKParamName}} {{.PKGoType}}, input {{.UpdateStructName}}) ({{.EntityName}}, error)

	// Delete removes a {{.EntityNameLower}} by its ID
	Delete(ctx context.Context, {{.PKParamName}} {{.PKGoType}}) error

	// List retrieves {{.EntityNamePlural}} with filters, ordering, and pagination
	List(ctx context.Context, filter {{.FilterStructName}}, fop fop.FOP) ([]{{.EntityName}}, *fop.Pagination, error)
{{- range .ForeignKeys}}

	// {{.MethodName}} retrieves all {{$.EntityNamePlural}} for a given {{.RefEntityName}}
	{{.MethodName}}(ctx context.Context, {{.FKParamName}} {{.FKGoType}}, fop fop.FOP) ([]{{$.EntityName}}, *fop.Pagination, error)
{{- end}}
}

// Repository provides access to {{.EntityNameLower}} storage
type Repository struct {
	log    *logger.Logger
	storer {{.StorerInterfaceName}}
}

// NewRepository creates a new {{.EntityName}} repository
func NewRepository(log *logger.Logger, storer {{.StorerInterfaceName}}) *Repository {
	return &Repository{
		log:    log,
		storer: storer,
	}
}

// Create adds a new {{.EntityNameLower}} to the repository
func (r *Repository) Create(ctx context.Context, payload {{.CreateStructName}}) ({{.EntityName}}, error) {
	{{- if .PKInCreate}}
	// PK is in Create struct - value provided or DB generates
	{{- else}}
	// PK not in Create struct - DB handles generation
	{{- end}}
	record, err := r.storer.Create(ctx, payload)
	if err != nil {
		return {{.EntityName}}{}, fmt.Errorf("create {{.EntityNameLower}}: %w", err)
	}
	return record, nil
}

// Get retrieves a {{.EntityNameLower}} by ID
func (r *Repository) Get(ctx context.Context, {{.PKParamName}} {{.PKGoType}}) ({{.EntityName}}, error) {
	record, err := r.storer.Get(ctx, {{.PKParamName}})
	if err != nil {
		return {{.EntityName}}{}, fmt.Errorf("get {{.EntityNameLower}}: %w", err)
	}
	return record, nil
}

// Update modifies an existing {{.EntityNameLower}}
func (r *Repository) Update(ctx context.Context, {{.PKParamName}} {{.PKGoType}}, payload {{.UpdateStructName}}) ({{.EntityName}}, error) {
	record, err := r.storer.Update(ctx, {{.PKParamName}}, payload)
	if err != nil {
		return {{.EntityName}}{}, fmt.Errorf("update {{.EntityNameLower}}: %w", err)
	}
	return record, nil
}

// Delete removes a {{.EntityNameLower}} by ID
func (r *Repository) Delete(ctx context.Context, {{.PKParamName}} {{.PKGoType}}) error {
	err := r.storer.Delete(ctx, {{.PKParamName}})
	if err != nil {
		return fmt.Errorf("delete {{.EntityNameLower}}: %w", err)
	}
	return nil
}

// List retrieves {{.EntityNamePlural}} with filters, ordering, and pagination
func (r *Repository) List(ctx context.Context, filter {{.FilterStructName}}, fop fop.FOP) ([]{{.EntityName}}, *fop.Pagination, error) {
	records, pagination, err := r.storer.List(ctx, filter, fop)
	if err != nil {
		return nil, nil, fmt.Errorf("list {{.EntityNamePlural}}: %w", err)
	}
	return records, pagination, nil
}
{{- range .ForeignKeys}}

// {{.MethodName}} retrieves all {{$.EntityNamePlural}} for a given {{.RefEntityName}}
func (r *Repository) {{.MethodName}}(ctx context.Context, {{.FKParamName}} {{.FKGoType}}, fop fop.FOP) ([]{{$.EntityName}}, *fop.Pagination, error) {
	records, pagination, err := r.storer.{{.MethodName}}(ctx, {{.FKParamName}}, fop)
	if err != nil {
		return nil, nil, fmt.Errorf("{{.MethodName}}: %w", err)
	}
	return records, pagination, nil
}
{{- end}}
`
