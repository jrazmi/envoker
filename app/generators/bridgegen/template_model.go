package bridgegen

const ModelTemplate = `// Code generated by bridgegen. DO NOT EDIT.

package {{.PackageName}}

import (
	"encoding/json"
{{- if .NeedsTimeImport}}
	"time"
{{- end}}
)

// {{.EntityName}} represents the bridge model for {{.EntityNameLower}}
type {{.EntityName}} struct {
{{- range .EntityFields}}
	{{.BridgeName}} {{.GoType}} ` + "`json:\"{{.DBColumn}}{{if .OmitEmpty}},omitempty{{end}}\"`" + `
{{- end}}
}

// Encode implements the encoder interface
func (t {{.EntityName}}) Encode() ([]byte, string, error) {
	data, err := json.Marshal(t)
	return data, "application/json", err
}

// Create{{.EntityName}}Input represents the input for creating a new {{.EntityNameLower}}
type Create{{.EntityName}}Input struct {
{{- range .CreateFields}}
	{{.BridgeName}} {{.GoType}} ` + "`json:\"{{.DBColumn}}{{if .OmitEmpty}},omitempty{{end}}\"`" + `
{{- end}}
}

// Decode implements the decoder interface
func (c *Create{{.EntityName}}Input) Decode(data []byte) error {
	return json.Unmarshal(data, c)
}

// Update{{.EntityName}}Input represents the input for updating a {{.EntityNameLower}}
type Update{{.EntityName}}Input struct {
{{- range .UpdateFields}}
	{{.BridgeName}} {{.GoType}} ` + "`json:\"{{.DBColumn}},omitempty\"`" + `
{{- end}}
}

// Decode implements the decoder interface
func (u *Update{{.EntityName}}Input) Decode(data []byte) error {
	return json.Unmarshal(data, u)
}
`
