package bridgegen

// GeneratedTemplate is the consolidated template for generated.go (always regenerated)
// This file contains ALL generated bridge code: models, HTTP handlers, marshaling, and FOP helpers
const GeneratedTemplate = `// Code generated by bridgegen. DO NOT EDIT.
// This file is ALWAYS REGENERATED - do not modify.
// For customizations, see model.go and bridge.go which use type aliases and embedding.

package {{.PackageName}}

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
{{- if .NeedsTimeImport}}
	"time"
{{- end}}

	"{{.ModulePath}}/bridge/scaffolding/errs"
	"{{.ModulePath}}/bridge/scaffolding/fopbridge"
	"{{.ModulePath}}/core/repositories/{{.RepoPackage}}"
	"{{.ModulePath}}/core/scaffolding/fop"
	"{{.ModulePath}}/infrastructure/web"
)

// ========================================
// QUERY PARAMS & PATH PARAMS
// ========================================

// generatedQueryParams holds raw query string values from the HTTP request
type generatedQueryParams struct {
	Limit  string
	Cursor string
	Order  string
	// Filter fields
	SearchTerm string
{{- range .FilterFields}}
{{- if eq .BridgeName "SearchTerm"}}{{/* Skip SearchTerm - already added */}}
{{- else if eq .BridgeName "CreatedAtBefore"}}
	CreatedAtBefore string
{{- else if eq .BridgeName "CreatedAtAfter"}}
	CreatedAtAfter string
{{- else if eq .BridgeName "UpdatedAtBefore"}}
	UpdatedAtBefore string
{{- else if eq .BridgeName "UpdatedAtAfter"}}
	UpdatedAtAfter string
{{- else}}
	{{.BridgeName}} string
{{- end}}
{{- end}}
}

// generatedPathParams holds path parameter values (parsed to their actual types)
type generatedPathParams struct {
	{{.PKGoName}} {{.PKGoType}}
{{- range .ForeignKeys}}
	{{.FKGoName}} {{.FKGoType}}
{{- end}}
}

// parseGeneratedQueryParams extracts raw query string values
func parseGeneratedQueryParams(r *http.Request) generatedQueryParams {
	q := r.URL.Query()
	return generatedQueryParams{
		Limit:      q.Get("limit"),
		Cursor:     q.Get("cursor"),
		Order:      q.Get("order"),
		SearchTerm: q.Get("search_term"),
{{- range .FilterFields}}
{{- if eq .BridgeName "SearchTerm"}}{{/* Skip - already added */}}
{{- else if eq .BridgeName "CreatedAtBefore"}}
		CreatedAtBefore: q.Get("created_at_before"),
{{- else if eq .BridgeName "CreatedAtAfter"}}
		CreatedAtAfter:  q.Get("created_at_after"),
{{- else if eq .BridgeName "UpdatedAtBefore"}}
		UpdatedAtBefore: q.Get("updated_at_before"),
{{- else if eq .BridgeName "UpdatedAtAfter"}}
		UpdatedAtAfter:  q.Get("updated_at_after"),
{{- else}}
		{{.BridgeName}}: q.Get("{{.DBColumn}}"),
{{- end}}
{{- end}}
	}
}

// parseGeneratedFilter converts query params to repository filter with validation
func parseGeneratedFilter(qp generatedQueryParams) ({{.RepoPackage}}.{{.EntityName}}Filter, error) {
	filter := {{.RepoPackage}}.{{.EntityName}}Filter{}

	// SearchTerm filter
	if qp.SearchTerm != "" {
		filter.SearchTerm = &qp.SearchTerm
	}

{{- range .FilterFields}}
{{- if eq .BridgeName "SearchTerm"}}{{/* Already handled above */}}
{{- else if or (eq .BridgeName "CreatedAtBefore") (eq .BridgeName "CreatedAtAfter") (eq .BridgeName "UpdatedAtBefore") (eq .BridgeName "UpdatedAtAfter")}}
	// {{.BridgeName}} - timestamp filter
	if qp.{{.BridgeName}} != "" {
		if t, err := time.Parse(time.RFC3339, qp.{{.BridgeName}}); err == nil {
			filter.{{.BridgeName}} = &t
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}} format: %s", qp.{{.BridgeName}})
		}
	}
{{- else if .IsTime}}
	// {{.BridgeName}} - timestamp filter
	if qp.{{.BridgeName}} != "" {
		if t, err := time.Parse(time.RFC3339, qp.{{.BridgeName}}); err == nil {
			filter.{{.BridgeName}} = &t
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}} format: %s", qp.{{.BridgeName}})
		}
	}
{{- else if Contains .GoType "int64"}}
	// {{.BridgeName}} - int64 filter
	if qp.{{.BridgeName}} != "" {
		if val, err := strconv.ParseInt(qp.{{.BridgeName}}, 10, 64); err == nil {
			filter.{{.BridgeName}} = &val
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}}: %s", qp.{{.BridgeName}})
		}
	}
{{- else if Contains .GoType "int32"}}
	// {{.BridgeName}} - int32 filter
	if qp.{{.BridgeName}} != "" {
		if val, err := strconv.ParseInt(qp.{{.BridgeName}}, 10, 32); err == nil {
			val32 := int32(val)
			filter.{{.BridgeName}} = &val32
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}}: %s", qp.{{.BridgeName}})
		}
	}
{{- else if Contains .GoType "int16"}}
	// {{.BridgeName}} - int16 filter
	if qp.{{.BridgeName}} != "" {
		if val, err := strconv.ParseInt(qp.{{.BridgeName}}, 10, 16); err == nil {
			val16 := int16(val)
			filter.{{.BridgeName}} = &val16
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}}: %s", qp.{{.BridgeName}})
		}
	}
{{- else if Contains .GoType "int"}}
	// {{.BridgeName}} - int filter
	if qp.{{.BridgeName}} != "" {
		if val, err := strconv.Atoi(qp.{{.BridgeName}}); err == nil {
			filter.{{.BridgeName}} = &val
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}}: %s", qp.{{.BridgeName}})
		}
	}
{{- else if Contains .GoType "float64"}}
	// {{.BridgeName}} - float64 filter
	if qp.{{.BridgeName}} != "" {
		if val, err := strconv.ParseFloat(qp.{{.BridgeName}}, 64); err == nil {
			filter.{{.BridgeName}} = &val
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}}: %s", qp.{{.BridgeName}})
		}
	}
{{- else if Contains .GoType "float32"}}
	// {{.BridgeName}} - float32 filter
	if qp.{{.BridgeName}} != "" {
		if val, err := strconv.ParseFloat(qp.{{.BridgeName}}, 32); err == nil {
			val32 := float32(val)
			filter.{{.BridgeName}} = &val32
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}}: %s", qp.{{.BridgeName}})
		}
	}
{{- else if Contains .GoType "bool"}}
	// {{.BridgeName}} - boolean filter
	if qp.{{.BridgeName}} != "" {
		if val, err := strconv.ParseBool(qp.{{.BridgeName}}); err == nil {
			filter.{{.BridgeName}} = &val
		} else {
			return filter, fmt.Errorf("invalid {{.DBColumn}}: %s (expected true/false)", qp.{{.BridgeName}})
		}
	}
{{- else}}
	// {{.BridgeName}} - string filter
	if qp.{{.BridgeName}} != "" {
		filter.{{.BridgeName}} = &qp.{{.BridgeName}}
	}
{{- end}}
{{- end}}

	return filter, nil
}

// parseGeneratedPath extracts and parses path parameters to their actual types
func parseGeneratedPath(r *http.Request) (generatedPathParams, error) {
	var pp generatedPathParams

	// Parse primary key
	pkStr := r.PathValue("{{.PKURLParam}}")
	if pkStr == "" {
		return pp, fmt.Errorf("{{.PKURLParam}} is required")
	}
{{- if eq .PKGoType "string"}}
	pp.{{.PKGoName}} = pkStr
{{- else if eq .PKGoType "int"}}
	pkVal, err := strconv.Atoi(pkStr)
	if err != nil {
		return pp, fmt.Errorf("invalid {{.PKURLParam}}: %s", pkStr)
	}
	pp.{{.PKGoName}} = pkVal
{{- else if eq .PKGoType "int64"}}
	pkVal, err := strconv.ParseInt(pkStr, 10, 64)
	if err != nil {
		return pp, fmt.Errorf("invalid {{.PKURLParam}}: %s", pkStr)
	}
	pp.{{.PKGoName}} = pkVal
{{- else if eq .PKGoType "int32"}}
	pkVal, err := strconv.ParseInt(pkStr, 10, 32)
	if err != nil {
		return pp, fmt.Errorf("invalid {{.PKURLParam}}: %s", pkStr)
	}
	pp.{{.PKGoName}} = int32(pkVal)
{{- else}}
	// Default: assume string type (e.g., UUID)
	pp.{{.PKGoName}} = pkStr
{{- end}}

{{- range .ForeignKeys}}
	// Parse foreign key: {{.FKGoName}}
	fkStr{{.FKGoName}} := r.PathValue("{{.FKURLParam}}")
	if fkStr{{.FKGoName}} != "" {
{{- if eq .FKGoType "string"}}
		pp.{{.FKGoName}} = fkStr{{.FKGoName}}
{{- else if eq .FKGoType "int"}}
		fkVal{{.FKGoName}}, errFK{{.FKGoName}} := strconv.Atoi(fkStr{{.FKGoName}})
		if errFK{{.FKGoName}} != nil {
			return pp, fmt.Errorf("invalid {{.FKURLParam}}: %s", fkStr{{.FKGoName}})
		}
		pp.{{.FKGoName}} = fkVal{{.FKGoName}}
{{- else if eq .FKGoType "int64"}}
		fkVal{{.FKGoName}}, errFK{{.FKGoName}} := strconv.ParseInt(fkStr{{.FKGoName}}, 10, 64)
		if errFK{{.FKGoName}} != nil {
			return pp, fmt.Errorf("invalid {{.FKURLParam}}: %s", fkStr{{.FKGoName}})
		}
		pp.{{.FKGoName}} = fkVal{{.FKGoName}}
{{- else if eq .FKGoType "int32"}}
		fkVal{{.FKGoName}}, errFK{{.FKGoName}} := strconv.ParseInt(fkStr{{.FKGoName}}, 10, 32)
		if errFK{{.FKGoName}} != nil {
			return pp, fmt.Errorf("invalid {{.FKURLParam}}: %s", fkStr{{.FKGoName}})
		}
		pp.{{.FKGoName}} = int32(fkVal{{.FKGoName}})
{{- else}}
		// Default: assume string type (e.g., UUID)
		pp.{{.FKGoName}} = fkStr{{.FKGoName}}
{{- end}}
	}
{{- end}}

	return pp, nil
}

// orderByFields maps URL-friendly field names to repository OrderBy constants
var orderByFields = map[string]string{
	"{{.PKURLParam}}": {{.RepoPackage}}.OrderByPK,
	"created_at":      {{.RepoPackage}}.OrderByCreatedAt,
	"updated_at":      {{.RepoPackage}}.OrderByUpdatedAt,
{{- range .FilterFields}}
	"{{.DBColumn}}": {{$.RepoPackage}}.OrderBy{{.BridgeName}},
{{- end}}
}

// parseGeneratedOrderBy converts order query param to fop.By with validation
func parseGeneratedOrderBy(order string) fop.By {
	if order == "" {
		return {{.RepoPackage}}.DefaultOrderBy
	}

	// Use FOP's ParseOrder which handles "field,direction" format
	orderBy, err := fop.ParseOrder(orderByFields, order, {{.RepoPackage}}.DefaultOrderBy)
	if err != nil {
		return {{.RepoPackage}}.DefaultOrderBy
	}

	return orderBy
}

// ========================================
// GENERATED BRIDGE (HTTP HANDLERS)
// ========================================

// GeneratedBridge provides default HTTP handler implementations.
// Embed this in your custom bridge struct to inherit default handlers.
// The bridge is tightly coupled to the repository - it directly uses the concrete repository type.
type GeneratedBridge struct {
	{{.EntityNameLower}}Repository *{{.RepoPackage}}.Repository
}

// ============================================================================
// SUGGESTED ROUTES FOR http.go
// ============================================================================
// Copy these routes to http.go's AddHttpRoutes function.
// If new foreign keys are added by migrations, new routes will appear here.
//
//	// Standard CRUD routes
//	group.GET("{{.HTTPBasePath}}", b.httpList)
//	group.GET("{{printf "%s/{%s}" .HTTPBasePath .PKURLParam}}", b.httpGetByID)
//	group.POST("{{.HTTPBasePath}}", b.httpCreate)
//	group.PUT("{{printf "%s/{%s}" .HTTPBasePath .PKURLParam}}", b.httpUpdate)
//	group.DELETE("{{printf "%s/{%s}" .HTTPBasePath .PKURLParam}}", b.httpDelete)
{{- if .ForeignKeys}}
//
//	// Foreign key routes
{{- range .ForeignKeys}}
//	group.GET("{{.RoutePath}}", b.{{.MethodName}})
{{- end}}
{{- end}}
// ============================================================================

// httpList handles GET requests for listing {{.EntityNamePlural}} with pagination and filtering
func (b *GeneratedBridge) httpList(ctx context.Context, r *http.Request) web.Encoder {
	qp := parseGeneratedQueryParams(r)

	page, err := fop.ParsePageStringCursor(qp.Limit, qp.Cursor)
	if err != nil {
		return errs.NewFieldErrors("page", err)
	}

	filter, err := parseGeneratedFilter(qp)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid filter: %s", err)
	}

	orderBy := parseGeneratedOrderBy(qp.Order)

	records, pagination, err := b.{{.EntityNameLower}}Repository.List(ctx, filter, orderBy, page)
	if err != nil {
		return errs.Newf(errs.Internal, "list {{.EntityNamePlural}}: %s", err)
	}

	return fopbridge.NewPaginatedResult(records, pagination)
}

// httpGetByID handles GET requests for retrieving a specific {{.EntityNameLower}} by ID
func (b *GeneratedBridge) httpGetByID(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	record, err := b.{{.EntityNameLower}}Repository.Get(ctx, qpath.{{.PKGoName}})
	if err != nil {
		return errs.Newf(errs.NotFound, "{{.EntityNameLower}} not found: %v", qpath.{{.PKGoName}})
	}

	return fopbridge.NewRecordResponse(record)
}

// httpCreate handles POST requests for creating a new {{.EntityNameLower}}
func (b *GeneratedBridge) httpCreate(ctx context.Context, r *http.Request) web.Encoder {
	var input {{.RepoPackage}}.Create{{.EntityName}}
	if err := web.Decode(r, &input); err != nil {
		return errs.Newf(errs.InvalidArgument, "decode: %s", err)
	}

	record, err := b.{{.EntityNameLower}}Repository.Create(ctx, input)
	if err != nil {
		return errs.Newf(errs.Internal, "create {{.EntityNameLower}}: %s", err)
	}

	return fopbridge.NewRecordResponse(record)
}

// httpUpdate handles PUT/PATCH requests for updating an existing {{.EntityNameLower}}
func (b *GeneratedBridge) httpUpdate(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	var input {{.RepoPackage}}.Update{{.EntityName}}
	if err := web.Decode(r, &input); err != nil {
		return errs.Newf(errs.InvalidArgument, "decode: %s", err)
	}

	err = b.{{.EntityNameLower}}Repository.Update(ctx, qpath.{{.PKGoName}}, input)
	if err != nil {
		return errs.Newf(errs.Internal, "update {{.EntityNameLower}}: %s", err)
	}

	return fopbridge.NewCodeResponse(errs.OK.String(), "{{.EntityName}} updated successfully")
}

// httpDelete handles DELETE requests for removing a {{.EntityNameLower}}
func (b *GeneratedBridge) httpDelete(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	err = b.{{.EntityNameLower}}Repository.Delete(ctx, qpath.{{.PKGoName}})
	if err != nil {
		return errs.Newf(errs.Internal, "delete {{.EntityNameLower}}: %s", err)
	}

	return fopbridge.NewCodeResponse(errs.OK.String(), "{{.EntityName}} deleted successfully")
}
{{- range .ForeignKeys}}

// {{.MethodName}} handles GET requests for listing {{$.EntityNamePlural}} by {{.RefEntityName}}
func (b *GeneratedBridge) {{.MethodName}}(ctx context.Context, r *http.Request) web.Encoder {
	qpath, err := parseGeneratedPath(r)
	if err != nil {
		return errs.Newf(errs.InvalidArgument, "invalid path arguments: %s", err)
	}

	qp := parseGeneratedQueryParams(r)

	page, err := fop.ParsePageStringCursor(qp.Limit, qp.Cursor)
	if err != nil {
		return errs.NewFieldErrors("page", err)
	}

	orderBy := parseGeneratedOrderBy(qp.Order)

	records, pagination, err := b.{{$.EntityNameLower}}Repository.ListBy{{.FKGoName}}(ctx, qpath.{{.FKGoName}}, orderBy, page)
	if err != nil {
		return errs.Newf(errs.Internal, "list {{$.EntityNamePlural}} by {{.FKGoName}}: %s", err)
	}

	return fopbridge.NewPaginatedResult(records, pagination)
}
{{- end}}
`
