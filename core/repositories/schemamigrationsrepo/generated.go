// Code generated by repositorygen. DO NOT EDIT.
// This file is ALWAYS REGENERATED - do not modify.
// For customizations, see repository.go which embeds the generated types.

package schemamigrationsrepo

import (
	"context"
	"fmt"

	"time"

	"github.com/jrazmi/envoker/core/scaffolding/fop"
	"github.com/jrazmi/envoker/sdk/logger"
)

// ========================================
// MODELS
// ========================================

// GeneratedSchemaMigration represents a schemaMigration entity from the database.
// Use the type alias in repository.go to reference this type, or embed it to extend.
type GeneratedSchemaMigration struct {
	Version   string    `json:"version" db:"version" validate:"required,max=255"`
	Checksum  string    `json:"checksum" db:"checksum" validate:"required,max=64"`
	AppliedAt time.Time `json:"applied_at" db:"applied_at" validate:"required"`
	CreatedAt time.Time `json:"created_at" db:"created_at" validate:"required"`
	UpdatedAt time.Time `json:"updated_at" db:"updated_at" validate:"required"`
}

// GeneratedCreateSchemaMigration contains the data needed to create a new schemaMigration.
// Use the type alias in repository.go to reference this type, or embed it to add custom fields.
type GeneratedCreateSchemaMigration struct {
	Version   string    `json:"version" db:"version" validate:"required,max=255"`
	Checksum  string    `json:"checksum" db:"checksum" validate:"required,max=64"`
	AppliedAt time.Time `json:"applied_at" db:"applied_at" validate:"required"`
}

// GeneratedUpdateSchemaMigration contains the data for updating an existing schemaMigration.
// All fields are optional (pointers) to support partial updates.
// Use the type alias in repository.go to reference this type, or embed it to add custom fields.
type GeneratedUpdateSchemaMigration struct {
	Checksum  *string    `json:"checksum" db:"checksum"`
	AppliedAt *time.Time `json:"applied_at" db:"applied_at"`
	UpdatedAt *time.Time `json:"updated_at" db:"updated_at"` // Optional override for updated_at
}

// ========================================
// FILTER, ORDERING, PAGINATION (FOP)
// ========================================

// OrderBy constants for sorting
const (
	OrderByPK        = "version"
	OrderByCreatedAt = "created_at"
	OrderByUpdatedAt = "updated_at"
	OrderByChecksum  = "checksum"
	OrderByAppliedAt = "applied_at"
)

// DefaultOrderBy specifies the default sort order
var DefaultOrderBy = fop.NewBy(OrderByCreatedAt, fop.DESC)

// GeneratedSchemaMigrationFilter holds the available fields a query can be filtered on.
// Use the type alias in repository.go to reference this type, or embed it to add custom filters.
type GeneratedSchemaMigrationFilter struct {
	SearchTerm      *string    `json:"search_term,omitempty"`       // Search across text fields
	Checksum        *string    `json:"checksum,omitempty"`          // Filter by checksum
	AppliedAt       *time.Time `json:"applied_at,omitempty"`        // Filter by applied_at
	CreatedAtBefore *time.Time `json:"created_at_before,omitempty"` // Filter by created_at < value
	CreatedAtAfter  *time.Time `json:"created_at_after,omitempty"`  // Filter by created_at > value
	UpdatedAtBefore *time.Time `json:"updated_at_before,omitempty"` // Filter by updated_at < value
	UpdatedAtAfter  *time.Time `json:"updated_at_after,omitempty"`  // Filter by updated_at > value
}

// SchemaMigrationCursor for cursor-based pagination
type SchemaMigrationCursor = fop.Cursor[string, time.Time]

// DecodeSchemaMigrationCursor decodes a cursor token
func DecodeSchemaMigrationCursor(token string) (*SchemaMigrationCursor, error) {
	return fop.DecodeCursor[string, time.Time](token)
}

// EncodeSchemaMigrationCursor encodes a cursor for pagination
func EncodeSchemaMigrationCursor(createdAt time.Time, version string) (string, error) {
	cursor := SchemaMigrationCursor{
		OrderValue: createdAt,
		PK:         version,
	}
	return cursor.Encode()
}

// ========================================
// STORER INTERFACE
// ========================================

// GeneratedStorer defines the auto-generated storage operations for SchemaMigration.
// This interface is regenerated on every schema change.
// To add custom storage methods, embed this interface in your Storer interface in repository.go.
type GeneratedStorer interface {
	// Create inserts a new schemaMigration
	Create(ctx context.Context, input GeneratedCreateSchemaMigration) (GeneratedSchemaMigration, error)

	// Get retrieves a schemaMigration by its ID
	Get(ctx context.Context, version string) (GeneratedSchemaMigration, error)

	// Update modifies an existing schemaMigration
	Update(ctx context.Context, version string, input GeneratedUpdateSchemaMigration) error

	// Delete removes a schemaMigration by its ID
	Delete(ctx context.Context, version string) error

	// List retrieves SchemaMigrations with filters, ordering, and pagination
	List(ctx context.Context, filter GeneratedSchemaMigrationFilter, orderBy fop.By, page fop.PageStringCursor, forPrevious bool) ([]GeneratedSchemaMigration, error)
}

// ========================================
// GENERATED REPOSITORY
// ========================================

// GeneratedRepository provides default implementations for all SchemaMigration CRUD operations.
// Embed this struct in your custom Repository (in repository.go) to inherit default behavior
// that you can selectively override.
type GeneratedRepository struct {
	log    *logger.Logger
	storer Storer
}

// Create inserts a new schemaMigration
func (r *GeneratedRepository) Create(ctx context.Context, input GeneratedCreateSchemaMigration) (GeneratedSchemaMigration, error) {
	entity, err := r.storer.Create(ctx, input)
	if err != nil {
		return GeneratedSchemaMigration{}, fmt.Errorf("create schemaMigration: %w", err)
	}
	return entity, nil
}

// Get retrieves a schemaMigration by its ID
func (r *GeneratedRepository) Get(ctx context.Context, version string) (GeneratedSchemaMigration, error) {
	entity, err := r.storer.Get(ctx, version)
	if err != nil {
		return GeneratedSchemaMigration{}, fmt.Errorf("get schemaMigration[%v]: %w", version, err)
	}
	return entity, nil
}

// Update modifies an existing schemaMigration
func (r *GeneratedRepository) Update(ctx context.Context, version string, input GeneratedUpdateSchemaMigration) error {
	if err := r.storer.Update(ctx, version, input); err != nil {
		return fmt.Errorf("update schemaMigration[%v]: %w", version, err)
	}
	return nil
}

// Delete removes a schemaMigration by its ID
func (r *GeneratedRepository) Delete(ctx context.Context, version string) error {
	if err := r.storer.Delete(ctx, version); err != nil {
		return fmt.Errorf("delete schemaMigration[%v]: %w", version, err)
	}
	return nil
}

// List retrieves SchemaMigrations with filters, ordering, and pagination
func (r *GeneratedRepository) List(ctx context.Context, filter GeneratedSchemaMigrationFilter, order fop.By, page fop.PageStringCursor) ([]GeneratedSchemaMigration, fop.Pagination, error) {
	// Request one more record than needed to check for next page
	listPage := fop.PageStringCursor{
		Limit:  page.Limit + 1,
		Cursor: page.Cursor,
	}

	// Fetch one more record than requested to determine if there's a next page
	records, err := r.storer.List(ctx, filter, order, listPage, false)
	if err != nil {
		return nil, fop.Pagination{}, fmt.Errorf("query: %w", err)
	}

	returnableRecords := records
	nextCursor := ""

	// If we have more records than the limit, trim the list and set next cursor
	if len(records) > page.Limit {
		returnableRecords = records[:page.Limit]
		lastRecord := returnableRecords[len(returnableRecords)-1]
		nextCursor, err = EncodeSchemaMigrationCursor(lastRecord.CreatedAt, lastRecord.Version)
		if err != nil {
			return nil, fop.Pagination{}, fmt.Errorf("encode next cursor: %w", err)
		}
	}

	pagination := fop.Pagination{
		HasPrev:        false,
		Limit:          page.Limit,
		PreviousCursor: "",
		NextCursor:     nextCursor,
		PageTotal:      len(returnableRecords),
	}

	// Check if there's a previous page
	if page.Cursor != "" {
		prevRecords, err := r.storer.List(ctx, filter, order, page, true)
		if err == nil && len(prevRecords) > 0 {
			pagination.HasPrev = true
			if len(prevRecords) == page.Limit {
				// we are re-reversing the order in the storage layer so we should start with the first item instead of the last
				firstRecord := prevRecords[0]
				pagination.PreviousCursor, err = EncodeSchemaMigrationCursor(firstRecord.CreatedAt, firstRecord.Version)
				if err != nil {
					return nil, fop.Pagination{}, fmt.Errorf("encode prev cursor: %w", err)
				}
			}
		}
	}

	return returnableRecords, pagination, nil
}
