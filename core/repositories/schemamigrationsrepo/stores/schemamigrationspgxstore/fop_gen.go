// Code generated by pgxstores. DO NOT EDIT.
// This file contains filter and ordering logic for SchemaMigration.

package schemamigrationspgxstore

import (
	"bytes"
	"strings"
	"time"

	"github.com/jrazmi/envoker/core/repositories/schemamigrationsrepo"
	"github.com/jackc/pgx/v5"
)

// orderByFields maps repository field names to database column names
var orderByFields = map[string]string{
	schemamigrationsrepo.OrderByPK:        "version",
	schemamigrationsrepo.OrderByCreatedAt: "created_at",
	schemamigrationsrepo.OrderByUpdatedAt: "updated_at",
	schemamigrationsrepo.OrderByChecksum: "checksum",
	schemamigrationsrepo.OrderByAppliedAt: "applied_at",
}

// applyFilter applies query filters to the SQL query
func (s *Store) applyFilter(filter schemamigrationsrepo.SchemaMigrationFilter, data pgx.NamedArgs, buf *bytes.Buffer) {
	var conditions []string
	// Filter by checksum
	if filter.Checksum != nil {
		conditions = append(conditions, "checksum = @checksum")
		data["checksum"] = *filter.Checksum
	}
	// Filter by applied_at
	if filter.AppliedAt != nil {
		conditions = append(conditions, "applied_at = @appliedAt")
		data["appliedAt"] = *filter.AppliedAt
	}
	// Filter by created_at - before
	if filter.CreatedAtBefore != nil {
		conditions = append(conditions, "created_at < @createdAt_before")
		data["createdAt_before"] = *filter.CreatedAtBefore
	}

	// Filter by created_at - after
	if filter.CreatedAtAfter != nil {
		conditions = append(conditions, "created_at > @createdAt_after")
		data["createdAt_after"] = *filter.CreatedAtAfter
	}
	// Filter by updated_at - before
	if filter.UpdatedAtBefore != nil {
		conditions = append(conditions, "updated_at < @updatedAt_before")
		data["updatedAt_before"] = *filter.UpdatedAtBefore
	}

	// Filter by updated_at - after
	if filter.UpdatedAtAfter != nil {
		conditions = append(conditions, "updated_at > @updatedAt_after")
		data["updatedAt_after"] = *filter.UpdatedAtAfter
	}

	// Search term across text fields
	if filter.SearchTerm != nil && *filter.SearchTerm != "" {
		searchPattern := "%" + *filter.SearchTerm + "%"
		searchConditions := []string{}
		searchConditions = append(searchConditions, "version ILIKE @search_term")
		searchConditions = append(searchConditions, "checksum ILIKE @search_term")
		if len(searchConditions) > 0 {
			conditions = append(conditions, "(" + strings.Join(searchConditions, " OR ") + ")")
			data["search_term"] = searchPattern
		}
	}

	// Apply conditions if any exist
	if len(conditions) > 0 {
		buf.WriteString(" WHERE ")
		buf.WriteString(strings.Join(conditions, " AND "))
	}
}
