// Code generated by repositorygen. DO NOT EDIT.
// This file is ALWAYS REGENERATED - do not modify.
// For customizations, see repository.go which embeds the generated types.

package tasksrepo

import (
	"context"
	"fmt"

	"encoding/json"
	"time"

	"github.com/jrazmi/envoker/core/scaffolding/fop"
	"github.com/jrazmi/envoker/sdk/logger"
)

// ========================================
// MODELS
// ========================================

// GeneratedTask represents a task entity from the database.
// Use the type alias in repository.go to reference this type, or embed it to extend.
type GeneratedTask struct {
	TaskId           string           `json:"task_id" db:"task_id" validate:"required"`
	ProcessingStatus string           `json:"processing_status" db:"processing_status" validate:"required,max=50"`
	CreatedAt        time.Time        `json:"created_at" db:"created_at" validate:"required"`
	UpdatedAt        time.Time        `json:"updated_at" db:"updated_at" validate:"required"`
	TaskType         string           `json:"task_type" db:"task_type" validate:"required,max=100"`
	Metadata         *json.RawMessage `json:"metadata" db:"metadata"`
	Priority         *int             `json:"priority" db:"priority"`
	MaxRetries       *int             `json:"max_retries" db:"max_retries"`
	RetryCount       *int             `json:"retry_count" db:"retry_count"`
	ErrorMessage     *string          `json:"error_message" db:"error_message"`
	ProcessingTimeMs *int             `json:"processing_time_ms" db:"processing_time_ms"`
	LastRunAt        *time.Time       `json:"last_run_at" db:"last_run_at"`
}

// GeneratedCreateTask contains the data needed to create a new task.
// Use the type alias in repository.go to reference this type, or embed it to add custom fields.
type GeneratedCreateTask struct {
	TaskId           string           `json:"task_id" db:"task_id" validate:"required"`
	ProcessingStatus string           `json:"processing_status" db:"processing_status" validate:"required,max=50"`
	TaskType         string           `json:"task_type" db:"task_type" validate:"required,max=100"`
	Metadata         *json.RawMessage `json:"metadata" db:"metadata"`
	Priority         *int             `json:"priority" db:"priority"`
	MaxRetries       *int             `json:"max_retries" db:"max_retries"`
	RetryCount       *int             `json:"retry_count" db:"retry_count"`
	ErrorMessage     *string          `json:"error_message" db:"error_message"`
	ProcessingTimeMs *int             `json:"processing_time_ms" db:"processing_time_ms"`
	LastRunAt        *time.Time       `json:"last_run_at" db:"last_run_at"`
}

// GeneratedUpdateTask contains the data for updating an existing task.
// All fields are optional (pointers) to support partial updates.
// Use the type alias in repository.go to reference this type, or embed it to add custom fields.
type GeneratedUpdateTask struct {
	ProcessingStatus *string          `json:"processing_status" db:"processing_status"`
	TaskType         *string          `json:"task_type" db:"task_type"`
	Metadata         *json.RawMessage `json:"metadata" db:"metadata"`
	Priority         *int             `json:"priority" db:"priority"`
	MaxRetries       *int             `json:"max_retries" db:"max_retries"`
	RetryCount       *int             `json:"retry_count" db:"retry_count"`
	ErrorMessage     *string          `json:"error_message" db:"error_message"`
	ProcessingTimeMs *int             `json:"processing_time_ms" db:"processing_time_ms"`
	LastRunAt        *time.Time       `json:"last_run_at" db:"last_run_at"`
	UpdatedAt        *time.Time       `json:"updated_at" db:"updated_at"` // Optional override for updated_at
}

// ========================================
// FILTER, ORDERING, PAGINATION (FOP)
// ========================================

// OrderBy constants for sorting
const (
	OrderByPK               = "task_id"
	OrderByCreatedAt        = "created_at"
	OrderByUpdatedAt        = "updated_at"
	OrderByProcessingStatus = "processing_status"
	OrderByTaskType         = "task_type"
	OrderByMetadata         = "metadata"
	OrderByPriority         = "priority"
	OrderByMaxRetries       = "max_retries"
	OrderByRetryCount       = "retry_count"
	OrderByErrorMessage     = "error_message"
	OrderByProcessingTimeMs = "processing_time_ms"
	OrderByLastRunAt        = "last_run_at"
)

// DefaultOrderBy specifies the default sort order
var DefaultOrderBy = fop.NewBy(OrderByCreatedAt, fop.DESC)

// GeneratedTaskFilter holds the available fields a query can be filtered on.
// Use the type alias in repository.go to reference this type, or embed it to add custom filters.
type GeneratedTaskFilter struct {
	SearchTerm       *string    `json:"search_term,omitempty"`        // Search across text fields
	ProcessingStatus *string    `json:"processing_status,omitempty"`  // Filter by processing_status
	CreatedAtBefore  *time.Time `json:"created_at_before,omitempty"`  // Filter by created_at < value
	CreatedAtAfter   *time.Time `json:"created_at_after,omitempty"`   // Filter by created_at > value
	UpdatedAtBefore  *time.Time `json:"updated_at_before,omitempty"`  // Filter by updated_at < value
	UpdatedAtAfter   *time.Time `json:"updated_at_after,omitempty"`   // Filter by updated_at > value
	TaskType         *string    `json:"task_type,omitempty"`          // Filter by task_type
	Priority         *int       `json:"priority,omitempty"`           // Filter by priority
	MaxRetries       *int       `json:"max_retries,omitempty"`        // Filter by max_retries
	RetryCount       *int       `json:"retry_count,omitempty"`        // Filter by retry_count
	ErrorMessage     *string    `json:"error_message,omitempty"`      // Filter by error_message
	ProcessingTimeMs *int       `json:"processing_time_ms,omitempty"` // Filter by processing_time_ms
	LastRunAt        *time.Time `json:"last_run_at,omitempty"`        // Filter by last_run_at
}

// TaskCursor for cursor-based pagination
type TaskCursor = fop.Cursor[string, time.Time]

// DecodeTaskCursor decodes a cursor token
func DecodeTaskCursor(token string) (*TaskCursor, error) {
	return fop.DecodeCursor[string, time.Time](token)
}

// EncodeTaskCursor encodes a cursor for pagination
func EncodeTaskCursor(createdAt time.Time, taskId string) (string, error) {
	cursor := TaskCursor{
		OrderValue: createdAt,
		PK:         taskId,
	}
	return cursor.Encode()
}

// ========================================
// STORER INTERFACE
// ========================================

// GeneratedStorer defines the auto-generated storage operations for Task.
// This interface is regenerated on every schema change.
// To add custom storage methods, embed this interface in your Storer interface in repository.go.
type GeneratedStorer interface {
	// Create inserts a new task
	Create(ctx context.Context, input GeneratedCreateTask) (GeneratedTask, error)

	// Get retrieves a task by its ID
	Get(ctx context.Context, taskId string) (GeneratedTask, error)

	// Update modifies an existing task
	Update(ctx context.Context, taskId string, input GeneratedUpdateTask) error

	// Delete removes a task by its ID
	Delete(ctx context.Context, taskId string) error

	// List retrieves Tasks with filters, ordering, and pagination
	List(ctx context.Context, filter GeneratedTaskFilter, orderBy fop.By, page fop.PageStringCursor, forPrevious bool) ([]GeneratedTask, error)
}

// ========================================
// GENERATED REPOSITORY
// ========================================

// GeneratedRepository provides default implementations for all Task CRUD operations.
// Embed this struct in your custom Repository (in repository.go) to inherit default behavior
// that you can selectively override.
type GeneratedRepository struct {
	log    *logger.Logger
	storer Storer
}

// Create inserts a new task
func (r *GeneratedRepository) Create(ctx context.Context, input GeneratedCreateTask) (GeneratedTask, error) {
	entity, err := r.storer.Create(ctx, input)
	if err != nil {
		return GeneratedTask{}, fmt.Errorf("create task: %w", err)
	}
	return entity, nil
}

// Get retrieves a task by its ID
func (r *GeneratedRepository) Get(ctx context.Context, taskId string) (GeneratedTask, error) {
	entity, err := r.storer.Get(ctx, taskId)
	if err != nil {
		return GeneratedTask{}, fmt.Errorf("get task[%v]: %w", taskId, err)
	}
	return entity, nil
}

// Update modifies an existing task
func (r *GeneratedRepository) Update(ctx context.Context, taskId string, input GeneratedUpdateTask) error {
	if err := r.storer.Update(ctx, taskId, input); err != nil {
		return fmt.Errorf("update task[%v]: %w", taskId, err)
	}
	return nil
}

// Delete removes a task by its ID
func (r *GeneratedRepository) Delete(ctx context.Context, taskId string) error {
	if err := r.storer.Delete(ctx, taskId); err != nil {
		return fmt.Errorf("delete task[%v]: %w", taskId, err)
	}
	return nil
}

// List retrieves Tasks with filters, ordering, and pagination
func (r *GeneratedRepository) List(ctx context.Context, filter GeneratedTaskFilter, order fop.By, page fop.PageStringCursor) ([]GeneratedTask, fop.Pagination, error) {
	// Request one more record than needed to check for next page
	listPage := fop.PageStringCursor{
		Limit:  page.Limit + 1,
		Cursor: page.Cursor,
	}

	// Fetch one more record than requested to determine if there's a next page
	records, err := r.storer.List(ctx, filter, order, listPage, false)
	if err != nil {
		return nil, fop.Pagination{}, fmt.Errorf("query: %w", err)
	}

	returnableRecords := records
	nextCursor := ""

	// If we have more records than the limit, trim the list and set next cursor
	if len(records) > page.Limit {
		returnableRecords = records[:page.Limit]
		lastRecord := returnableRecords[len(returnableRecords)-1]
		nextCursor, err = EncodeTaskCursor(lastRecord.CreatedAt, lastRecord.TaskId)
		if err != nil {
			return nil, fop.Pagination{}, fmt.Errorf("encode next cursor: %w", err)
		}
	}

	pagination := fop.Pagination{
		HasPrev:        false,
		Limit:          page.Limit,
		PreviousCursor: "",
		NextCursor:     nextCursor,
		PageTotal:      len(returnableRecords),
	}

	// Check if there's a previous page
	if page.Cursor != "" {
		prevRecords, err := r.storer.List(ctx, filter, order, page, true)
		if err == nil && len(prevRecords) > 0 {
			pagination.HasPrev = true
			if len(prevRecords) == page.Limit {
				// we are re-reversing the order in the storage layer so we should start with the first item instead of the last
				firstRecord := prevRecords[0]
				pagination.PreviousCursor, err = EncodeTaskCursor(firstRecord.CreatedAt, firstRecord.TaskId)
				if err != nil {
					return nil, fop.Pagination{}, fmt.Errorf("encode prev cursor: %w", err)
				}
			}
		}
	}

	return returnableRecords, pagination, nil
}
